@TestMethodOrder
1. MethodOrderer.DisplayName
2. MethodOrderer.MethodName
3. MethodOrderer.OrderAnnotation
4. MethodOrderer.Random

class NumberService {
	public long sumNOddNumbers(int n) {
		int i = 0;
		int c = 0;
		long sum = 0;
		
		while(c < n) {
			if(i %2 !=0) {
				sum+=i;
				c++;
			}
			i++;
		}
		return sum;
	}
}

@TestInstance(Lifecycle.PER_METHOD)
@TestMethodOrder(MethodOrderer.Random)
class NumberServiceTest {
	NumberService numberService;
	
	@BeforeAll
	public static void init() {
		
	}
	
	@BeforeEach
	public void setUp() {
		numberService = new NumberService();
	}
	
	@Test
	@Order(2)
	public void testSumNOddNumbers(int n) {
		int n = 5;
		long expectedSum = 25;
		
		long actualSum = numberService.sumNOddNumbers(n);
		assertEquals(expectedSum, actualSum);
	}
	
	@Test
	@Order(1)
	public void testSumNOddNumbersWithNOne(int n) {
		int n = 1;
		long expectedSum = 1;
		long actualSum = numberService.sumNOddNumbers(n);
		assertEquals(expectedSum, actualSum);
	}
	
	@AfterEach
	public void tearDown() {
		numberService = null;
	}
	
	@AfterAll
	public void close() {
		
	}
}

#4. Display Name
Test classes and Test methods we can attach custom displayNames using @DisplayName annotation. we can write these names as descriptive as possible to produce a nice test reports generated by TestRunners or IDES

@DisplayName("TestCase class to test Calculator")
class CalculatorTest {
	@Test
	@DisplayName("testing add with positive numbers")
	public void testAddWithPositiveNumbers() {
	
	}
	@Test
	@DisplayName("testing add with negative numbers")
	public void testAddWithNegativeNumbers() {
	
	}
	@Test
	@DisplayName("testing add with passing a, b as zeros")
	public void testAddWithZero() {
	
	}
}

#5. DisplayName Generators
Instead of we attaching display names to the class or method, we can use display name generator to generate the names automatically. We can configure display name generator to generate the names based on different strategies using @DisplayNameGeneration

There are 4 display name generation strategies are supported
1. Standard
2. Simple = no parathesis and no parameters
3. ReplaceUnderScores = if we have under scores in methodname/classnames it replaces with spaces
4. IndicativeSentences = generates complete sentences by concatenating the names of test method and enclosing classnames

if we supply @DisplayName along with @DisplayNameGeneration the @DisplayName only takes more priority

@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderScores)
class NumberTest {
	@Test
	public void test_sum_of_n_odd_numbers_with_positive_n() {
		
	}
}
test sum of n odd numbers with positive n: passed





































